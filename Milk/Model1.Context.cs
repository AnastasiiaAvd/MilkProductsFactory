//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Milk
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MilkProductsEntities3 : DbContext
    {
        public MilkProductsEntities3()
            : base("name=MilkProductsEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Budgets> Budgets { get; set; }
        public virtual DbSet<Credit> Credit { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<ExpensesHistory> ExpensesHistory { get; set; }
        public virtual DbSet<Ingredients> Ingredients { get; set; }
        public virtual DbSet<LoanPayment> LoanPayment { get; set; }
        public virtual DbSet<Positions> Positions { get; set; }
        public virtual DbSet<Premium> Premium { get; set; }
        public virtual DbSet<Production> Production { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<productSells> productSells { get; set; }
        public virtual DbSet<RawMaterials> RawMaterials { get; set; }
        public virtual DbSet<rawPurchases> rawPurchases { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Taxes> Taxes { get; set; }
        public virtual DbSet<Units> Units { get; set; }
        public virtual DbSet<ViewSum> ViewSum { get; set; }
    
        public virtual int addEmployee(string emloyeeName, Nullable<int> position, Nullable<double> salary, string address, string phoneNumber)
        {
            var emloyeeNameParameter = emloyeeName != null ?
                new ObjectParameter("emloyeeName", emloyeeName) :
                new ObjectParameter("emloyeeName", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(double));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addEmployee", emloyeeNameParameter, positionParameter, salaryParameter, addressParameter, phoneNumberParameter);
        }
    
        public virtual int addIngredient(Nullable<int> product, Nullable<int> rawMaterial, Nullable<int> amount)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var rawMaterialParameter = rawMaterial.HasValue ?
                new ObjectParameter("rawMaterial", rawMaterial) :
                new ObjectParameter("rawMaterial", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addIngredient", productParameter, rawMaterialParameter, amountParameter);
        }
    
        public virtual int addPosition(string positionName)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("PositionName", positionName) :
                new ObjectParameter("PositionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addPosition", positionNameParameter);
        }
    
        public virtual int addProduct(string productName, Nullable<int> unit, Nullable<int> amount, Nullable<double> sum, Nullable<double> cost)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProduct", productNameParameter, unitParameter, amountParameter, sumParameter, costParameter);
        }
    
        public virtual int addProduction(Nullable<int> product, Nullable<int> amount, Nullable<int> employee)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProduction", productParameter, amountParameter, employeeParameter);
        }
    
        public virtual int addProductSell(Nullable<int> product, Nullable<int> amount, Nullable<double> sum, Nullable<int> employee)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProductSell", productParameter, amountParameter, sumParameter, employeeParameter);
        }
    
        public virtual int addRawMaterial(string rawName, Nullable<int> unit, Nullable<double> sum, Nullable<int> amount, Nullable<double> cost)
        {
            var rawNameParameter = rawName != null ?
                new ObjectParameter("rawName", rawName) :
                new ObjectParameter("rawName", typeof(string));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addRawMaterial", rawNameParameter, unitParameter, sumParameter, amountParameter, costParameter);
        }
    
        public virtual int addRawPurchase(Nullable<int> rawMaterial, Nullable<int> amount, Nullable<double> sum, Nullable<int> employee)
        {
            var rawMaterialParameter = rawMaterial.HasValue ?
                new ObjectParameter("rawMaterial", rawMaterial) :
                new ObjectParameter("rawMaterial", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addRawPurchase", rawMaterialParameter, amountParameter, sumParameter, employeeParameter);
        }
    
        public virtual int addUnit(string unitName)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addUnit", unitNameParameter);
        }
    
        public virtual int deleteEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmployee", idParameter);
        }
    
        public virtual int deleteIngredient(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteIngredient", idParameter);
        }
    
        public virtual int deletePosition(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deletePosition", positionIdParameter);
        }
    
        public virtual int DeletePremium(Nullable<int> iDSale)
        {
            var iDSaleParameter = iDSale.HasValue ?
                new ObjectParameter("IDSale", iDSale) :
                new ObjectParameter("IDSale", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePremium", iDSaleParameter);
        }
    
        public virtual int deleteProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProduct", idParameter);
        }
    
        public virtual int deleteProduction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProduction", idParameter);
        }
    
        public virtual int deleteProductSell(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteProductSell", idParameter);
        }
    
        public virtual int deleteRawMaterial(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteRawMaterial", idParameter);
        }
    
        public virtual int deleteRawPurchase(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteRawPurchase", idParameter);
        }
    
        public virtual int DeleteTax(Nullable<int> iDSale)
        {
            var iDSaleParameter = iDSale.HasValue ?
                new ObjectParameter("IDSale", iDSale) :
                new ObjectParameter("IDSale", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTax", iDSaleParameter);
        }
    
        public virtual int deleteUnit(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUnit", idParameter);
        }
    
        public virtual int Diff(Nullable<int> credit, Nullable<int> payout, Nullable<System.DateTime> end, ObjectParameter peny)
        {
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(int));
    
            var payoutParameter = payout.HasValue ?
                new ObjectParameter("payout", payout) :
                new ObjectParameter("payout", typeof(int));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Diff", creditParameter, payoutParameter, endParameter, peny);
        }
    
        public virtual ObjectResult<geAllExpensesHistory_Result> geAllExpensesHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<geAllExpensesHistory_Result>("geAllExpensesHistory");
        }
    
        public virtual ObjectResult<getALLBudgets_Result> getALLBudgets(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getALLBudgets_Result>("getALLBudgets", idParameter);
        }
    
        public virtual ObjectResult<getAllCredits_Result> getAllCredits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllCredits_Result>("getAllCredits");
        }
    
        public virtual ObjectResult<getAllEmployees_Result> getAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllEmployees_Result>("getAllEmployees");
        }
    
        public virtual ObjectResult<getAllIngredients_Result> getAllIngredients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllIngredients_Result>("getAllIngredients");
        }
    
        public virtual ObjectResult<getALLPositions_Result> getALLPositions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getALLPositions_Result>("getALLPositions");
        }
    
        public virtual ObjectResult<getAllPremium_Result> getAllPremium()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllPremium_Result>("getAllPremium");
        }
    
        public virtual ObjectResult<getAllProduction_Result> getAllProduction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllProduction_Result>("getAllProduction");
        }
    
        public virtual ObjectResult<getAllProducts_Result> getAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllProducts_Result>("getAllProducts");
        }
    
        public virtual ObjectResult<getAllProductSells_Result> getAllProductSells()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllProductSells_Result>("getAllProductSells");
        }
    
        public virtual ObjectResult<getAllRawMaterials_Result> getAllRawMaterials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllRawMaterials_Result>("getAllRawMaterials");
        }
    
        public virtual ObjectResult<getAllRawPurchases_Result> getAllRawPurchases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllRawPurchases_Result>("getAllRawPurchases");
        }
    
        public virtual ObjectResult<getAllTaxes_Result> getAllTaxes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllTaxes_Result>("getAllTaxes");
        }
    
        public virtual ObjectResult<getAllUnits_Result> getAllUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllUnits_Result>("getAllUnits");
        }
    
        public virtual ObjectResult<getEmployee_Result> getEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployee_Result>("getEmployee", idParameter);
        }
    
        public virtual ObjectResult<getIngredient_Result> getIngredient(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getIngredient_Result>("getIngredient", idParameter);
        }
    
        public virtual ObjectResult<getPosition_Result> getPosition(Nullable<int> positionId)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPosition_Result>("getPosition", positionIdParameter);
        }
    
        public virtual ObjectResult<getProduct_Result> getProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProduct_Result>("getProduct", idParameter);
        }
    
        public virtual ObjectResult<getProduction_Result> getProduction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProduction_Result>("getProduction", idParameter);
        }
    
        public virtual ObjectResult<getProductSell_Result> getProductSell(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProductSell_Result>("getProductSell", idParameter);
        }
    
        public virtual ObjectResult<getRawPurchase_Result> getRawPurchase(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRawPurchase_Result>("getRawPurchase", idParameter);
        }
    
        public virtual ObjectResult<getUnit_Result> getUnit(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUnit_Result>("getUnit", idParameter);
        }
    
        public virtual int InsertPremium(Nullable<int> id, Nullable<int> idEmployee, Nullable<double> sum)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idEmployeeParameter = idEmployee.HasValue ?
                new ObjectParameter("IdEmployee", idEmployee) :
                new ObjectParameter("IdEmployee", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPremium", idParameter, idEmployeeParameter, sumParameter);
        }
    
        public virtual int InsertTax(Nullable<int> id, Nullable<int> idEmployee, Nullable<double> sum)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idEmployeeParameter = idEmployee.HasValue ?
                new ObjectParameter("IdEmployee", idEmployee) :
                new ObjectParameter("IdEmployee", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("Sum", sum) :
                new ObjectParameter("Sum", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTax", idParameter, idEmployeeParameter, sumParameter);
        }
    
        public virtual int PayCredit(Nullable<long> idCredit, Nullable<int> payoutNumber, Nullable<System.DateTime> paymentDate, ObjectParameter isPay)
        {
            var idCreditParameter = idCredit.HasValue ?
                new ObjectParameter("idCredit", idCredit) :
                new ObjectParameter("idCredit", typeof(long));
    
            var payoutNumberParameter = payoutNumber.HasValue ?
                new ObjectParameter("PayoutNumber", payoutNumber) :
                new ObjectParameter("PayoutNumber", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayCredit", idCreditParameter, payoutNumberParameter, paymentDateParameter, isPay);
        }
    
        public virtual int PayRent(ObjectParameter isPay)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayRent", isPay);
        }
    
        public virtual int PaySalary(ObjectParameter isPay)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaySalary", isPay);
        }
    
        public virtual int PayTax(ObjectParameter isPay)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayTax", isPay);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateBudget(Nullable<int> id, Nullable<double> sum)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBudget", idParameter, sumParameter);
        }
    
        public virtual int updateEmployee(Nullable<int> id, string emloyeeName, Nullable<int> position, Nullable<double> salary, string address, string phoneNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var emloyeeNameParameter = emloyeeName != null ?
                new ObjectParameter("emloyeeName", emloyeeName) :
                new ObjectParameter("emloyeeName", typeof(string));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(double));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateEmployee", idParameter, emloyeeNameParameter, positionParameter, salaryParameter, addressParameter, phoneNumberParameter);
        }
    
        public virtual int updateIngredient(Nullable<int> id, Nullable<int> product, Nullable<int> rawMaterial, Nullable<int> amount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var rawMaterialParameter = rawMaterial.HasValue ?
                new ObjectParameter("rawMaterial", rawMaterial) :
                new ObjectParameter("rawMaterial", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateIngredient", idParameter, productParameter, rawMaterialParameter, amountParameter);
        }
    
        public virtual int updatePosition(Nullable<int> positionId, string positionName)
        {
            var positionIdParameter = positionId.HasValue ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(int));
    
            var positionNameParameter = positionName != null ?
                new ObjectParameter("PositionName", positionName) :
                new ObjectParameter("PositionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePosition", positionIdParameter, positionNameParameter);
        }
    
        public virtual int UpdatePremium(Nullable<int> idSale, Nullable<int> iDEmployee, Nullable<double> oldSum, Nullable<double> newSum)
        {
            var idSaleParameter = idSale.HasValue ?
                new ObjectParameter("IdSale", idSale) :
                new ObjectParameter("IdSale", typeof(int));
    
            var iDEmployeeParameter = iDEmployee.HasValue ?
                new ObjectParameter("IDEmployee", iDEmployee) :
                new ObjectParameter("IDEmployee", typeof(int));
    
            var oldSumParameter = oldSum.HasValue ?
                new ObjectParameter("OldSum", oldSum) :
                new ObjectParameter("OldSum", typeof(double));
    
            var newSumParameter = newSum.HasValue ?
                new ObjectParameter("NewSum", newSum) :
                new ObjectParameter("NewSum", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePremium", idSaleParameter, iDEmployeeParameter, oldSumParameter, newSumParameter);
        }
    
        public virtual int updateProd()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProd");
        }
    
        public virtual int updateProduct(Nullable<int> id, string productName, Nullable<int> unit, Nullable<int> amount, Nullable<double> sum, Nullable<double> cost)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProduct", idParameter, productNameParameter, unitParameter, amountParameter, sumParameter, costParameter);
        }
    
        public virtual int updateProduction(Nullable<int> id, Nullable<int> product, Nullable<int> amount, Nullable<int> employee)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProduction", idParameter, productParameter, amountParameter, employeeParameter);
        }
    
        public virtual int updateProductSell(Nullable<int> id, Nullable<int> product, Nullable<int> amount, Nullable<double> sum, Nullable<int> emloyee)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var emloyeeParameter = emloyee.HasValue ?
                new ObjectParameter("emloyee", emloyee) :
                new ObjectParameter("emloyee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateProductSell", idParameter, productParameter, amountParameter, sumParameter, emloyeeParameter);
        }
    
        public virtual int updateRawMaterial(Nullable<int> id, string rawName, Nullable<int> unit, Nullable<double> sum, Nullable<int> amount, Nullable<double> cost)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var rawNameParameter = rawName != null ?
                new ObjectParameter("rawName", rawName) :
                new ObjectParameter("rawName", typeof(string));
    
            var unitParameter = unit.HasValue ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRawMaterial", idParameter, rawNameParameter, unitParameter, sumParameter, amountParameter, costParameter);
        }
    
        public virtual int updateRawPurchase(Nullable<int> id, Nullable<int> raw, Nullable<int> amount, Nullable<double> sum, Nullable<int> employee)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var rawParameter = raw.HasValue ?
                new ObjectParameter("raw", raw) :
                new ObjectParameter("raw", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(double));
    
            var employeeParameter = employee.HasValue ?
                new ObjectParameter("employee", employee) :
                new ObjectParameter("employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRawPurchase", idParameter, rawParameter, amountParameter, sumParameter, employeeParameter);
        }
    
        public virtual int UpdateTax(Nullable<int> idSale, Nullable<int> iDEmployee, Nullable<double> oldSum, Nullable<double> newSum)
        {
            var idSaleParameter = idSale.HasValue ?
                new ObjectParameter("IdSale", idSale) :
                new ObjectParameter("IdSale", typeof(int));
    
            var iDEmployeeParameter = iDEmployee.HasValue ?
                new ObjectParameter("IDEmployee", iDEmployee) :
                new ObjectParameter("IDEmployee", typeof(int));
    
            var oldSumParameter = oldSum.HasValue ?
                new ObjectParameter("OldSum", oldSum) :
                new ObjectParameter("OldSum", typeof(double));
    
            var newSumParameter = newSum.HasValue ?
                new ObjectParameter("NewSum", newSum) :
                new ObjectParameter("NewSum", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTax", idSaleParameter, iDEmployeeParameter, oldSumParameter, newSumParameter);
        }
    
        public virtual int updateUnit(Nullable<int> id, string unitName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUnit", idParameter, unitNameParameter);
        }
    }
}
